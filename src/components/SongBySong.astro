---
import ListenOnGroup from "./ListenOnGroup.astro";
import Rating from "./Rating.astro";

interface Props {
  id: string;
  name: string;
  color: string;
  rating: number;
  duration: string;
  links: { appleMusic: string; spotify: string; youtube: string; more: string };
  explicit?: boolean;
  isStart?: boolean;
  isEnd?: boolean;
  textColor?: string;
  type?: "default" | "interlude" | "hidden-gem" | "single" | "bonus" | string;
}

const {
  id,
  name,
  color,
  rating,
  duration,
  links,
  explicit = false,
  isStart = undefined,
  isEnd = false,
  textColor = "var(--color-white)",
  type = "default",
} = Astro.props;

const colorMap = {
  default: "to-white/15",
  interlude: "to-light-purple/15",
  "hidden-gem": "to-light-yellow/15",
  single: "to-light-green/15",
  bonus: "to-light-red/15",
};

// @ts-ignore
const cls = `w-full h-full text-white p-4 rounded-t-2xl h-fit space-y-2 text-lg bg-gradient-to-b from-white/0 ${colorMap[type]}`;
---

<div
  class={`border-x-2 ${isStart ? "border-b-1 border-t-2" : ""} ${isEnd ? "border-t-1 border-b-2" : ""} ${(!isStart && !isEnd) ? "border-y-1" : ""} border-white ${isStart ? "rounded-t-2xl" : ""} ${isEnd ? "rounded-b-2xl" : ""} h-fit space-y-2 text-lg`}
  style={`background-color: ${color}; color: ${textColor}`}
  id={`sbs-${id}`}
>
  <div class={cls}>
    {isStart && <h2 class="font-bold text-4xl">Song-by-Song</h2>}
    <Rating {name} {color} {rating} {duration} {explicit} {type} />
    <ListenOnGroup {...links} />
    <div class="space-y-4">
      <slot />
    </div>
  </div>
</div>
